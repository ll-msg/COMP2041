#!/usr/bin/env python3
import sys, re

command_len = len(sys.argv)
# incorrect usage error
if command_len < 2:
    print("usage: slippy [-i] [-n] [-f <script-file> | <sed-command>] [<files>...]")
    exit(1)
full_command = sys.argv[1]
# remove extra white space
full_command = full_command.replace(" ", "")
input_files = []

line = ""

line_number = 0
n_line_number = 1
q_line_number = 0
range_start_d = False
range_end_d = False
range_start_q = False
range_end_q = False
range_start_p = False
range_end_p = False

'''
Argument: String
Return: List
function used to get a list of commands from arguments seperated by ";" or new line
remove comment part at the same time
'''
def get_commands(full_command):
    new_full_command = []
    if ";" in full_command:
        full_command = full_command.split(";")
        for command in full_command:
            command = command.split("#")[0]
            new_full_command.append(command)
        return new_full_command  
    if "\n" in full_command:
        full_command = full_command.split("\n")
        for command in full_command:
            command = command.split("#")[0]
            new_full_command.append(command)
        return new_full_command  
    return [full_command]

'''
Argument: String
Return: String / Bool
function used to check if there is substitute command in the command list
return the substitute command if there exists
return False if there is no such command
'''
def check_sub(cmd_lst):
    for word in cmd_lst:
        if word.startswith("s"):
            return word
    return False

'''
Argument: String
Return: String / Bool
function used to check if there is delete command in the command list
return the delete command if there exists
return False if there is no such command
'''
def check_delete(cmd_lst):
    for word in cmd_lst:
        if word.endswith("d"):
            return word
    return False

'''
Argument: String
Return: String / Bool
function used to check if there is quit command in the command list
return the quit command if there exists
return False if there is no such command
'''
def check_quit(cmd_lst):
    for word in cmd_lst:
        if word.endswith("q"):
            return word
    return False

'''
Argument: String
Return: String / Bool
function used to check if there is print command in the command list
return the print command if there exists
return False if there is no such command
'''
def check_print(cmd_lst):
    for word in cmd_lst:
        if word.endswith("p"):
            return word
    return False


while True:
    '''
    -f command line option
    reads Slippy commands from the specified file
    '''
    if full_command == "-f":
        f_cmd = []
        full_command = ""
        f_file = sys.argv[2]
        with open(f_file, "r") as f_read:
            for command_line in f_read:
                f_cmd.append(command_line)
        for cmds in f_cmd:
            full_command += cmds
        full_command = full_command.strip()
        
    line = sys.stdin.readline()
        
    
    '''
    -n command line option
    stops input lines being printed by default
    ''' 
    if full_command == "-n":
        real_command = sys.argv[2]
        if real_command[-1] != "p":
            break
        else:
            # the address is a number
            if "/" not in real_command:
                address = real_command[0:-1]
                if address.isdigit():
                    address = int(address)
                else:
                    break
                if n_line_number == address:
                    print(line.strip())
                    break
            # the address is pattern
            else:
                pattern = re.compile(real_command.split("/")[1])
                result = re.search(pattern, line)
                if (result != None):
                    print(line.strip())

    '''
    substitute command
    replaces the specified regex on the input line
    '''
    # search for the first character (seperator) after "s"
    # partially implemented (can't deal with command like "s$")
    seperator = re.search("s", full_command)
    if seperator is not None:
        seperator = full_command[seperator.span()[1]]

    is_substitute = False
    s_index = 0
    s_pattern = ""
    s_substitute = ""
    s_command = ""
    
    # check if using the substitute command
    get_sub_full_command = check_sub(get_commands(full_command))
    if get_sub_full_command != False:
        s_command = get_sub_full_command
    else:
        s_command = full_command
    command_group = s_command.split(seperator)
    # split the command using the seperator above
    # find if the command ends with "s"
    # if true then is the substitute command
    for word in command_group:
        if word.endswith("s"): 
            is_substitute = True
            break
        s_index += 1
    
    if is_substitute:
        address = re.sub(re.escape(seperator), "", s_command.split("s")[0])
        address = re.sub("/", "", s_command.split("s")[0])
        s_pattern = command_group[s_index + 1]
        s_substitute = command_group[s_index + 2]
        g_command = s_command[-1]
        
        # address is pattern
        if s_command.startswith("/"):
            result = re.findall(re.compile(address), line)
            if (result != []):
                if g_command == "g":
                    line = re.sub(s_pattern, s_substitute , line)
                else:
                    line = re.sub(s_pattern, s_substitute , line, 1)
        # address is a number
        else:
            if address.isdigit():
                address = int(address)
                if line_number + 1 == address:
                    # substitue with g command
                    # substitue all occurred target word
                    if g_command == "g":
                        line = re.sub(s_pattern, s_substitute , line)
                    else:
                        line = re.sub(s_pattern, s_substitute , line, 1)
            else:
                if g_command == "g":
                    line = re.sub(s_pattern, s_substitute , line)
                else:
                    line = re.sub(s_pattern, s_substitute , line, 1)
    
    
    '''
    delete command
    deletes the input line
    '''
    if check_delete(get_commands(full_command)):
        command = check_delete(get_commands(full_command))
        if "/" not in command:
            address = command[0:-1]
            # check if there is a valid address (number)
            if address.isdigit():
                address = int(address)
            else:
                break
            if line_number != address - 1:
                print(line, end='')
                q_line_number += 1
        # the address is pattern
        else:
            # deal with range regex (command with comma)
            # partially implemented
            if "," in command:
                pattern_start = re.compile(re.sub("/", "", command.split(",")[0]))
                pattern_end = re.compile(re.sub("/", "", command.split(",")[1]).rstrip("d"))

                if re.findall(pattern_start, line) != []:
                    range_start_d = True
                
                if ((not range_start_d) and (not range_end_d)) or ((range_start_d) and (range_end_d)):
                    print(line, end='')
                    
                if re.findall(pattern_end, line) != []:
                    range_end_d = True
            # normal regex without range
            else:
                pattern = re.compile(command.split("/")[1])
                result = re.findall(pattern, line)
                if (result == []):
                    print(line, end='')
                
        line_number += 1
        q_line_number += 1
        if line == "":
            break
    # there's nothing to delete
    # print the input line
    else:
        line_number += 1
        q_line_number += 1
        n_line_number += 1
        # the line is empty, stop the loop
        if line == "":
            break
        if (full_command != "-n"):
            print(line, end='')
    
    '''
    quit command
    causes slippy.py to exit
    '''
    if check_quit(get_commands(full_command)):
        command = check_quit(get_commands(full_command))
        # check pattern
        # if only one number - stop at that line number
        if "/" not in command:
            address = command[0:-1]
            if address.isdigit():
                address = int(address)
            else:
                break
            if q_line_number == address:
                break
        # the address is pattern
        # quit at the line matches the regex
        else:
            pattern = re.compile(command.split("/")[1])
            result = re.findall(pattern, line)
            if (result != []):
                break
            
    ### print command ###
    ### prints the input line###
    elif check_print(get_commands(full_command)):
        command = check_print(get_commands(full_command))
        # the address is a number
        if "/" not in command:
            address = command[0:-1]
            if address.isdigit():
                address = int(address)
            else:
                print(line.strip())

            if line_number == address:
                print(line.strip())                
        # the address is pattern
        else:
            pattern = re.compile(command.split("/")[1])
            result = re.search(pattern, line)
            if (result != None):
                print(line.strip())